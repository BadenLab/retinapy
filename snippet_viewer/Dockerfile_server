FROM ubuntu:20.04

#FROM nvidia/cuda:11.7.1-cudnn8-devel-ubuntu20.04

ARG USER_ID=1001
ARG GROUP_ID=101
ARG USER=app
ENV USER=$USER
ARG PROJ_ROOT=/$USER

USER root
RUN groupadd --gid $GROUP_ID $USER
RUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID $USER

RUN mkdir $PROJ_ROOT && chown $USER $PROJ_ROOT
WORKDIR $PROJ_ROOT	

#RUN mkdir data && chown $USER data
#RUN mkdir out && chown $USER out

# tzdata configuration stops for an interactive prompt without the env var.
# https://serverfault.com/questions/949991/how-to-install-tzdata-on-a-ubuntu-docker-image
# https://stackoverflow.com/questions/51023312/docker-having-issues-installing-apt-utils/56569081#56569081
ENV TZ=Europe/London
RUN apt-get update && DEBIAN_FRONTEND=noninteractive \
	apt-get install --no-install-recommends -y \
	tzdata

RUN apt-get update && apt-get install -y --no-install-recommends \
	curl \
	ca-certificates \
	python3-pip \
	python-is-python3 \
	locales && \
	rm -rf /var/lib/apt/lists/*

# Set the locale
RUN locale-gen en_US.UTF-8  
ENV LANG en_US.UTF-8  
ENV LANGUAGE en_US:en  
ENV LC_ALL en_US.UTF-8  

###############################################################################
# Conda, for Node
###############################################################################

# Set up the Conda environment (using Miniforge)
ENV PATH=/home/$USER/mambaforge/bin:$PATH
#COPY environment.yml /app/environment.yml
RUN curl -sLo ./mambaforge.sh https://github.com/conda-forge/miniforge/releases/download/22.9.0-3/Mambaforge-22.9.0-3-Linux-x86_64.sh \
 && chmod +x ./mambaforge.sh \
 && ./mambaforge.sh -b -p /home/$USER/mambaforge \
 && rm ./mambaforge.sh \
# && mamba env update -n base -f /app/environment.yml \
# && rm /app/environment.yml \
 && mamba clean -ya

RUN conda install --yes -c conda-forge nodejs'>=12.12.0'

###############################################################################
# /Conda
###############################################################################

COPY ./snippet_viewer/requirements.txt requirements.txt
RUN pip install --upgrade pip
RUN pip install -r requirements.txt

COPY ./pkg_requirements.txt retinapy_requirements.txt
RUN pip install -r retinapy_requirements.txt


# New requirements. Eventually merge into requirements.txt
RUN pip install psycopg_pool \
	pydantic

USER root
# On the server, we need retinapy, scripts and snippet_viewer directories only,
# and not in an editable way.
COPY --chown=$USER ./retinapy ./retinapy
RUN pip install ./retinapy

COPY --chown=$USER ./scripts ./scripts
COPY --chown=$USER ./snippet_viewer ./snippet_viewer

ENV npm_config_cache=/home/app/npm_cache
# Switching to our new user. Do this at the end, as we need root permissions 
# in order to create folders and install things.
USER $USER


CMD ["/bin/bash", "-c", "./scripts/deployweb.sh"]

